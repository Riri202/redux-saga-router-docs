"use strict";(self.webpackChunkredux_saga_router_docs=self.webpackChunkredux_saga_router_docs||[]).push([[155],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,g=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9912:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:6,title:"Sagas"},c=void 0,l={unversionedId:"sagas",id:"sagas",title:"Sagas",description:"Since the router is saga-based, it makes sense to define sagas for router targets and api requests.",source:"@site/docs/sagas.md",sourceDirName:".",slug:"/sagas",permalink:"/redux-saga-router-docs/docs/sagas",editUrl:"https://github.com/infonomic/redux-saga-router-docs/tree/main/docs/sagas.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Sagas"},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/redux-saga-router-docs/docs/hooks"},next:{title:"Dispatch",permalink:"/redux-saga-router-docs/docs/dispatch"}},d={},p=[{value:"navigate",id:"navigate",level:3},{value:"setLocation",id:"setlocation",level:3}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Since the router is saga-based, it makes sense to define sagas for router targets and api requests."),(0,o.kt)("h3",{id:"navigate"},"navigate"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"navigate")," is a redux action (defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"redux/actions.js"),"). There is a saga that will respond to this action - ",(0,o.kt)("inlineCode",{parentName:"p"},"handleNavigation")," - which checks for a configured saga on the route - and if found, will ",(0,o.kt)("inlineCode",{parentName:"p"},"call")," it. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"CLEAR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PUSH")," params that determine whether the new location will replace the current location in the location stack, or is added to the location stack. Note that if a configured saga is found and called, it will be up to the saga to complete the route change by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"setLocation")," (see below), to update ",(0,o.kt)("inlineCode",{parentName:"p"},"window.history"),"."),(0,o.kt)("p",null,"It can be called from within a react component handler as..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  const handleListWidgets = value => {\n    dispatch(navigate(L.Widgets.list(null, query)))\n  }\n")),(0,o.kt)("p",null,"Or from within a saga as..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"* destroy({ payload: { id, data } }) {\n    yield put(mutations.setLoading())\n    try {\n      yield call(apiRequest, { method: 'delete', url: `/backend-endpoint/${id}` })\n      yield put(mutations.mutation({ id }))\n      yield put(navigate(L.LocationModuleName.locationName()))\n    } catch (error) {\n      // Error handling\n    }\n  },\n")),(0,o.kt)("h3",{id:"setlocation"},"setLocation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"setLocation")," is a redux action (defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"redux/actions.js"),"). There is both a saga - ",(0,o.kt)("inlineCode",{parentName:"p"},"updateLocation"),", and a reducer that will respond to this action. The saga will update the current ",(0,o.kt)("inlineCode",{parentName:"p"},"window.history")," with requested route path, and the reducer will decide whether to replace or push the location onto the current location stack based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"CLEAR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PUSH")," params. ",(0,o.kt)("inlineCode",{parentName:"p"},"setLocation")," will ignore any router configured sagas. "),(0,o.kt)("p",null,"For more information on how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"CLEAR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PUSH")," props check ",(0,o.kt)("a",{parentName:"p",href:"/docs/components"},"this doc")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"* fetchList({ payload: { to, mode } }) {\n  const { query: params } = to\n\n  yield put(mutations.setLoading())\n  yield put(setLocation(to, mode))\n\n  try {\n    const response = yield call(apiRequest, {\n      method: 'get',\n      url: '/backend-endpoint',\n      params,\n    })\n    yield put(mutations.mutation(response))\n  } catch (error) {\n    // Error handling\n  }\n},\n")))}m.isMDXComponent=!0}}]);